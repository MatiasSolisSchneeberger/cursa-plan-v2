---
import {Icon} from "astro-icon/components"
import RequisitosPara from "./RequisitosPara.astro"
import {examenes} from "@data/mesaDeExamenes.json"

interface Props {
	materia: string
	codigo?: number
	paraCursar: Array<condicion> | null
	paraRendir: Array<condicion> | null
	planDeEstudio: string | null
	theme?: string
}
interface condicion {
	mat: string
	cond: "R" | "A"
}
interface mesa {
	fecha: string
}

const {materia, codigo, paraCursar, paraRendir, planDeEstudio, theme} = Astro.props

const baseURL = "https://www.google.com/calendar/render?action=TEMPLATE"

const formatDate = (fecha: string | null) => {
	if (!fecha || typeof fecha !== "string") return null // Si es null o no es string, devolver null

	// Check if the date is in "dd/mm/yyyy" format (from mesaDeExamenes.json)
	if (fecha.includes('/')) {
		const dateParts = fecha.split('/')
		if (dateParts.length !== 3) return null
		
		const [day, month, year] = dateParts
		if (!year || !month || !day) return null
		
		return `${day}/${month}/${year.slice(-2)}`
	}
	
	// Handle "yyyy-mm-dd" format (legacy format)
	const dateParts = fecha.split("-")
	if (dateParts.length !== 3) return null // Si el formato no es "aaaa-mm-d", devolver null

	const [year, month, day] = dateParts

	if (!year || !month || !day) return null // Si falta algún dato, devolver null

	return `${day.padStart(2, "0")}/${month.padStart(2, "0")}/${year.slice(-2)}`
}

// Find the corresponding examen in mesaDeExamenes.json
const examen = examenes.find(e => e.asignatura.toUpperCase() === materia.toUpperCase())

// Get the turnos if the examen exists, otherwise use an empty array
const turnos = examen?.turnos || []

// Convert turnos to the format expected by the component
const sortedMesas = turnos
	.filter((turno) => turno.fecha)
	.map(turno => {
		// Convert dd/mm/yyyy to yyyy-mm-dd for sorting
		const [day, month, year] = turno.fecha.split('/')
		return {
			fecha: `${year}-${month}-${day}`
		}
	})
	.sort((a, b) => {
		return new Date(a.fecha).getTime() - new Date(b.fecha).getTime()
	})

const proximaMesa = sortedMesas.length > 0 ? sortedMesas[0] : null

let eventUrl = ""
if (proximaMesa) {
	// Convertir la fecha en objeto Date (se asume el formato "aaaa-mm-d")
	const examDate = new Date(proximaMesa.fecha)
	const year = examDate.getFullYear().toString()
	const month = (examDate.getMonth() + 1).toString().padStart(2, "0")
	const day = examDate.getDate().toString().padStart(2, "0")
	// Para un evento de día completo, el formato es: YYYYMMDD (inicio) y el día siguiente para el fin.
	const startDate = `${year}${month}${day}`
	const examDateNext = new Date(examDate)
	examDateNext.setDate(examDate.getDate() + 1)
	const yearNext = examDateNext.getFullYear().toString()
	const monthNext = (examDateNext.getMonth() + 1).toString().padStart(2, "0")
	const dayNext = examDateNext.getDate().toString().padStart(2, "0")
	const endDate = `${yearNext}${monthNext}${dayNext}`
	const eventTitle = encodeURIComponent(`Examen De ${materia}`)
	eventUrl = `${baseURL}&text=${eventTitle}&dates=${startDate}/${endDate}`
}
---

<article
	class={`materia-card theme-${theme} w-full border-outline full rounded-3xl border p-2 flex flex-col gap-2.5 items-center justify-start flex-1 relative overflow-hidden`}
	data-materia={materia}
	data-codigo={codigo}
	id={materia}>
	<header
		class="bg-[var(--md-sys-color-primary)] text-[var(--md-sys-color-on-primary)] rounded-2xl p-1.5 flex flex-row gap-2.5 items-center w-full justify-center self-stretch shrink-0 relative">
		<h3 class="text-center text-headline-small relative flex-1 flex items-center justify-center text-pretty">
			{materia}
		</h3>
	</header>

	<!-- Requisitos -->
	<section class="flex w-full flex-col lg:flex-row gap-2.5 items-start justify-start relative">
		<RequisitosPara CursarRendir="Cursar" requisitos={paraCursar} />
		<RequisitosPara CursarRendir="Rendir" requisitos={paraRendir} />
	</section>

	<!-- Footer -->
	<footer class="flex w-full flex-col lg:flex-row gap-2.5 items-start justify-start relative overflow-hidden">
		<!-- Mesa de Examenes -->
		<div
			class="w-full lg:w-1/2 sm:flex-initial bg-[var(--md-sys-color-surface-variant)] rounded-2xl flex flex-col p-2.5 gap-2.5 items-center justify-start self-stretch shrink-0 relative overflow-hidden">
			<header
				class="w-full bg-[var(--md-sys-color-primary-container)] p-2 rounded-xl flex flex-col text-center text-[var(--md-sys-color-on-primary-container)] text-title-small">
				{
					proximaMesa ?
						<>
							<h4>Proxima Mesa de Examen:</h4>
							<p>{`${formatDate(proximaMesa.fecha)}`}</p>
						</>
					:	<h4>No hay Fechas</h4>
				}
			</header>
			<footer class="flex flex-wrap gap-2.5 items-start justify-start self-stretch shrink-0 relative">
				<md-outlined-button
					class="px-6 w-full flex-1 lg:w-1/2"
					onclick={`openDialog('dialog-${materia}')`}
					disabled={!proximaMesa}>
					Ver Mas
				</md-outlined-button>
				<md-filled-button
					class="px-6 w-full flex-1 lg:w-1/2"
					trailing-icon
					href={eventUrl}
					target="_blank"
					disabled={!proximaMesa}>
					Agendar
					
					<Icon name="GoogleCalendar" class={!proximaMesa ? "grayscale-100" : ""} slot="icon"/>

				</md-filled-button>
			</footer>
		</div>
		<div
			class="w-full lg:w-1/2 sm:flex-1 bg-[var(--md-sys-color-surface-variant)] rounded-2xl flex flex-col p-2.5 gap-2.5 items-center justify-start self-stretch shrink-0 relative overflow-hidden">
			<header
				class="w-full bg-[var(--md-sys-color-primary-container)] p-2 rounded-lg text-center text-[var(--md-sys-color-on-primary-container)] text-title-small">
				Plan De Estudio
			</header>
			<footer class="flex flex-wrap gap-2.5 items-start justify-start self-stretch shrink-0 relative">
				<md-outlined-button class="px-6 w-full flex-1" disabled={!planDeEstudio}>Ver</md-outlined-button>
				<md-filled-button class="px-6 w-full flex-1" disabled={!planDeEstudio}>Descargar</md-filled-button>
			</footer>
		</div>
	</footer>
</article>

<!-- Aside: Lista de todas las mesas -->
<aside id=`dialog-${materia}` class="fixed inset-0 z-50 hidden flex items-center justify-center p-4">
	<!-- Backdrop -->
	<div
		class="fixed inset-0 bg-black opacity-25 ease-in-out transition-all duration-300"
		onclick=`closeDialog('dialog-${materia}')`>
	</div>

	<!-- Contenedor del dialog -->
	<div
		class="relative bg-[var(--md-sys-color-surface)] rounded-3xl w-full max-w-lg p-4 shadow-lg transform transition-all duration-300 scale-95 opacity-0 max-h-[90vh] flex flex-col">
		<!-- Contenido superior -->
		<div class="flex flex-col items-center justify-center gap-2.5 relative">
			<!-- Icono -->
			<div class="text-[var(--md-sys-color-primary)]">
				<svg
					xmlns="http://www.w3.org/2000/svg"
					width="24"
					height="24"
					viewBox="0 0 24 24"
					fill="currentColor"
					class="icon icon-tabler icons-tabler-filled icon-tabler-calendar">
					<path stroke="none" d="M0 0h24v24H0z" fill="none"> </path>
					<path
						d="M16 2a1 1 0 0 1 .993 .883l.007 .117v1h1a3 3 0 0 1 2.995 2.824l.005 .176v12a3 3 0 0 1 -2.824 2.995l-.176 .005h-12a3 3 0 0 1 -2.995 -2.824l-.005 -.176v-12a3 3 0 0 1 2.824 -2.995l.176 -.005h1v-1a1 1 0 0 1 1.993 -.117l.007 .117v1h6v-1a1 1 0 0 1 1 -1zm3 7h-14v9.625c0 .705 .386 1.286 .883 1.366l.117 .009h12c.513 0 .936 -.53 .993 -1.215l.007 -.16v-9.625z">
					</path>
					<path
						d="M12 12a1 1 0 0 1 .993 .883l.007 .117v3a1 1 0 0 1 -1.993 .117l-.007 -.117v-2a1 1 0 0 1 -.117 -1.993l.117 -.007h1z">
					</path>
				</svg>
			</div>
			<!-- Título -->
			<h2 class="text-headline-small text-[var(--md-sys-color-on-surface)]">{materia}</h2>
		</div>

		<!-- Lista con scroll -->
		<div class="flex-1 overflow-y-auto overscroll-contain py-4 w-full">
			<md-list>
				{
					turnos.map((turno, index) => {
						const formattedDate = turno.fecha
						const generateCalendarLink = (fecha: string) => {
							// Convert dd/mm/yyyy to Date object
							const [day, month, year] = fecha.split('/')
							const examDate = new Date(Number(year), Number(month) - 1, Number(day))
							
							const startDate = `${year}${month.padStart(2, "0")}${day.padStart(2, "0")}`
							const examDateNext = new Date(examDate)
							examDateNext.setDate(examDate.getDate() + 1)
							
							const nextYear = examDateNext.getFullYear()
							const nextMonth = (examDateNext.getMonth() + 1).toString().padStart(2, "0")
							const nextDay = examDateNext.getDate().toString().padStart(2, "0")
							
							const endDate = `${nextYear}${nextMonth}${nextDay}`

							return `https://www.google.com/calendar/render?action=TEMPLATE&text=Examen%20De%20${encodeURIComponent(materia)}&dates=${startDate}/${endDate}`
						}

						return (
							<>
								<md-list-item>
									<div>
										<strong>Mesa {index + 1}:</strong> {formattedDate}
									</div>
									<md-outlined-button
										href={generateCalendarLink(turno.fecha)}
										target="_blank"
										class="pl-4 pr-6 w-min"
										slot="end"
										aria-label="Agendar en Google Calendar">
										Agendar
										<Icon name="GoogleCalendar" slot="icon"/>
									</md-outlined-button>
								</md-list-item>
								<md-divider />
							</>
						)
					})
				}
			</md-list>
		</div>

		<!-- Botón -->
		<div class="pt-4 text-center">
			<md-filled-button onclick=`closeDialog('dialog-${materia}')` class="px-6 w-min">Cerrar</md-filled-button>
		</div>
	</div>
</aside>
<script is:inline>
	function openDialog(id) {
		const dialog = document.getElementById(id)
		const content = dialog.querySelector("div.relative")
		dialog.classList.remove("hidden")
		document.body.style.overflow = "hidden"; // Bloquea el scroll en el fondo
		// Forzar reflow para reiniciar la animación
		void content.offsetWidth
		content.classList.remove("opacity-0", "scale-95")
		content.classList.add("opacity-100", "scale-100")
	}

	function closeDialog(id) {
		const dialog = document.getElementById(id)
		const content = dialog.querySelector("div.relative")
		content.classList.remove("opacity-100", "scale-100")
		document.body.style.overflow = ""; // Restaura el scroll en el fondo
		content.classList.add("opacity-0", "scale-95")
		setTimeout(() => {
			dialog.classList.add("hidden")
		}, 300)
	}
</script>

<style>
	/* Animación de apertura del dialog */
	@keyframes fadeIn {
		from {
			opacity: 0;
		}
		to {
			opacity: 1;
		}
	}

	/* Animación de cierre del dialog */
	@keyframes fadeOut {
		from {
			opacity: 1;
		}
		to {
			opacity: 0;
		}
	}

	/* Estilos para el backdrop con animación */
	.dialog-backdrop {
		animation: fadeIn 300ms ease-out forwards;
	}

	.dialog-backdrop.hidden {
		animation: fadeOut 300ms ease-in forwards;
	}
</style>
